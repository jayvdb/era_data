sudo: false
language: python

virtualenv:
  system_site_packages: true

addons:
  apt:
    packages:
      - python-lxml

env:
  global:
    - DBNAME=era_data

matrix:
  include:
    - env: DB=oracle
      language: python
      python: 2.7
      sudo: required
      cache: false

before_install:
  # 'sqlite3' and 'mysql' are the command name, and they are quiet by default
  - SQLCMD=$DB
  - SQLCMD_QUIET=$SQLCMD

  - if [ "$DB" = 'sqlite3' ]; then
      DBNAME="$DBNAME.sqlite" ;
      DBURL="sqlite:///era_data.sqlite" ;
      PYDBD="" ;
    fi

  - if [ "$DB" = 'pgsql' ]; then
      export PGUSER=postgres ;
      DBURL="postgresql://postgres@localhost/era_data" ;
      PYDBD=psycopg2 ;

      SQLCMD=psql ;
      SQLCMD_QUIET="psql -q" ;
    fi

  # pip install mysqldb fails 'Could not find any downloads that satisfy the requirement mysqldb'
  - if [ "$DB" = 'mysql' ]; then
      DBURL="mysql://travis@localhost/era_data" ;
      PYDBD="" ;
    fi

  - if [ "$DB" = 'oracle' ]; then
      export DBNAME="/" ;
      DBURL="oracle:///" ;
      PYDBD='cx_oracle' ;

      if [ -z "$ORACLE_LOGIN_ssousername" -o -z "$ORACLE_LOGIN_password" ]; then
        echo ORACLE_LOGIN_ssousername or ORACLE_LOGIN_password are not set ;
        echo Oracle XE can not be installed ;
        exit 101 ;
      fi ;

      SQLCMD=sqlplus ;
      SQLCMD_QUIET="sqlplus -s" ;

      export ORACLE_COOKIE=sqldev ;
      export ORACLE_FILE=oracle11g/xe/oracle-xe-11.2.0-1.0.x86_64.rpm.zip ;
      export ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe ;
      export ORACLE_SID=XE ;
      export PATH=$PATH:$ORACLE_HOME/bin ;
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib ;
      wget 'https://github.com/cbandy/travis-oracle/archive/v2.0.0.tar.gz'; mkdir -p .travis/oracle ; tar xz --strip-components 1 -C .travis/oracle -f v2.0.0.tar.gz ;
      bash -x .travis/oracle/download.sh ;
      bash -x .travis/oracle/install.sh ;
      ls $ORACLE_HOME/lib ;
    fi

  - export SQLCMD; export SQLCMD_QUIET

before_script:
  # Create two schema scripts with tables prefixed era2010 and era2012
  - sed -re 's/(^CREATE TABLE|REFERENCES|CONSTRAINT) journal([_ ])/\1 era2010_journal\2/g' schema.sql > schema2010.sql
  - sed -re 's/(^CREATE TABLE|REFERENCES|CONSTRAINT) journal([_ ])/\1 era2012_journal\2/g' schema.sql > schema2012.sql

  - if [ "$DB" = 'mysql' ]; then sed -ri 's/varchar2\((1?[0-9][0-9]?)\)/varchar(\1)/;s/varchar2\(([0-9]+)\)/text(\1)/' schema2010.sql schema2012.sql; fi
  - if [ "$DB" = 'pgsql' ]; then sed -ri 's/varchar2\(([0-9]+)\)/varchar(\1)/' schema2010.sql schema2012.sql; fi

  - if [ "$DB" != 'sqlite3' -a "$DB" != 'oracle' ]; then echo 'create database era_data;' | $SQLCMD; fi

  # Populate database with both schema
  - $SQLCMD_QUIET $DBNAME < schema2010.sql
  - $SQLCMD_QUIET $DBNAME < schema2012.sql

script:
  - if [ -n "$PYDBD" ]; then pip install $PYDBD; fi
  - py.test --sqlalchemy-connect-url="$DBURL"

notifications:
  email: false

cache:
  directories:
    - .cache/era_xml
